{"version":3,"sources":["header/Header.tsx","shared/WeatherIconSelector.tsx","util/Keys.ts","util/Api.ts","models/LocalStorageCity.ts","util/Store.ts","CityHandler/AddCity.tsx","CityHandler/CityListItem.tsx","CityHandler/Error.tsx","CityHandler/CityHandler.tsx"],"names":["Header","name","className","href","process","WeatherIconSelector","icon","faSun","color","faTint","faSnowflake","faCloud","apiKey","baseUrl","getCurrentWeather","city","fetch","then","res","status","json","Error","statusText","getCurrentWeatherForPosition","lat","lon","getWeatherForecastForPosition","getCurrentWeathers","ids","getWeatherForecast","id","LocalStorageCity","this","localStorageCities","getCities","JSON","parse","localStorage","getItem","AddCity","props","onChange","e","setState","text","target","value","addCity","preventDefault","state","onSubmit","type","React","ListLink","styled","a","ItemText","span","RemoveButton","button","WeatherContainer","div","CityListItem","item","removeItem","as","Math","round","main","temp","weather","onClick","errorString","CityHandler","cities","error","bind","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","unshift","catch","storedCities","store","length","map","reduce","b","list","cityText","undefined","find","x","toLowerCase","push","setItem","stringify","filteredCities","filter"],"mappings":"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","file":"static/js/6.a904ed5a.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './Header.css'\r\n\r\nconst baseUrl = process.env.PUBLIC_URL;\r\n\r\ninterface IProps {\r\n  name: string;\r\n}\r\nconst Header: React.SFC<IProps> = ({ name }) => (\r\n  <header className=\"App-header header\">\r\n    <a href={`${baseUrl}/list`} className=\"App-menu\">\r\n      <span className=\"fas fa-list\" />\r\n    </a>\r\n    <h1 className=\"App-title\">{name}</h1>\r\n  </header>\r\n  \r\n);\r\n\r\nexport default Header;\r\n","import { faCloud, faSnowflake, faSun, faTint } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\n\r\ninterface IWeatherIconProps {\r\n  icon: string;\r\n}\r\n\r\nconst WeatherIconSelector: React.SFC<IWeatherIconProps> = ({ icon }) => {\r\n  switch (icon) {\r\n    case 'Sun':\r\n    case 'Clear':\r\n      return (<FontAwesomeIcon icon={faSun} color=\"yellow\" />);\r\n    case 'Rain':\r\n      return (<FontAwesomeIcon icon={faTint} color=\"blue\" />);\r\n    case 'Snow':\r\n      return (<FontAwesomeIcon icon={faSnowflake} />);\r\n    case 'Clouds':\r\n    case 'Fog':\r\n    default:\r\n      return (<FontAwesomeIcon icon={faCloud} color=\"grey\" />);\r\n  }\r\n};\r\n\r\nexport default WeatherIconSelector;\r\n","export const apiKey = '794fd1eb804018f71fb274449e212c02';","import { apiKey } from './Keys';\r\nconst baseUrl = 'https://api.openweathermap.org/data/2.5/';\r\n\r\nexport function getCurrentWeather(city: string) {\r\n  return fetch(`${baseUrl}weather?q=${city}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getCurrentWeatherForPosition(lat: number, lon: number) {\r\n  return fetch(`${baseUrl}weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getWeatherForecastForPosition(lat: number, lon: number) {\r\n  return fetch(`${baseUrl}forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getCurrentWeathers(ids: any) {\r\n  return fetch(`${baseUrl}group?id=${ids}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getWeatherForecast(id: string) {\r\n  return fetch(`${baseUrl}forecast?id=${id}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n","export class LocalStorageCity {\r\n  public id: string;\r\n  public name: string;\r\n\r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}","import { City } from \"../models/City\";\r\nimport { LocalStorageCity } from \"../models/LocalStorageCity\";\r\n\r\nconst localStorageCities = 'weather-cities';\r\n\r\nexport function getCities(): LocalStorageCity[] {\r\n  return JSON.parse(localStorage.getItem(localStorageCities) || '[]');\r\n}\r\n\r\nexport function addCity(city: LocalStorageCity) {\r\n  const cities = getCities();\r\n  cities.push(city);\r\n  localStorage.setItem(localStorageCities, JSON.stringify(cities));\r\n}\r\n\r\nexport function removeCity(city: City) {\r\n  const cities = getCities();\r\n  const filteredCities = cities.filter(x => x.name.toLowerCase() !== city.name.toLowerCase());\r\n  localStorage.setItem(localStorageCities, JSON.stringify(filteredCities));\r\n}\r\n","import * as React from 'react';\r\nimport './AddCity.css';\r\n\r\ninterface IProps {\r\n  addCity: (text: string) => void;\r\n}\r\ninterface IState {\r\n  text: string;\r\n}\r\nclass AddCity extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state ={\r\n      text: '',\r\n    } \r\n  }\r\n\r\n  onChange = (e: any) => {\r\n    this.setState({text: e.target.value});\r\n  }\r\n\r\n  addCity = (e: any) => {\r\n    e.preventDefault();\r\n    if (this.state.text) {\r\n      this.setState({text: ''}); \r\n      this.props.addCity(this.state.text);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.addCity} className=\"add-city\">\r\n        <span className=\"add-city__header\">\r\n          Lägg till stad\r\n        </span>\r\n        <div className=\"add-city-input\">\r\n          <div className=\"add-city-input-container\">\r\n            <input type=\"text\" className=\"add-city-input-field__input\" onChange={this.onChange} value={this.state.text} />\r\n          </div>\r\n          <button type=\"submit\" data-testid=\"plus-button\">\r\n            <i className=\"fas fa-2x fa-plus-circle\" />\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCity;\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { City } from '../models/City';\r\nimport WeatherIconSelector from '../shared/WeatherIconSelector';\r\n\r\ninterface IProps {\r\n  item: City;\r\n  removeItem: any;\r\n}\r\nconst CityListItem: React.SFC<IProps> = ({ item, removeItem }) => {\r\n  const removeItemHandler = (e: any) => removeItem(item, e);\r\n  return (\r\n    <ListLink as=\"a\" href={`city/${item.id}`}>\r\n      <ItemText>\r\n        {item.name}\r\n      </ItemText>\r\n      <WeatherContainer>\r\n        <ItemText>\r\n          {Math.round(item.main.temp)}\r\n        </ItemText>\r\n        <WeatherIconSelector icon={item.weather[0].main} />\r\n        <RemoveButton type=\"button\" onClick={removeItemHandler}>\r\n          <i className=\"fa fa-2x fa-minus-circle\" />\r\n        </RemoveButton>\r\n      </WeatherContainer>\r\n    </ListLink>\r\n  );\r\n}\r\n\r\nconst ListLink = styled.a`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n  border-bottom: 1px solid white;\r\n  padding: 10px;\r\n`;\r\nconst ItemText = styled.span`\r\n  padding-top: 4px;\r\n  padding-right: 5px;\r\n`;\r\nconst RemoveButton = styled.button`\r\n  color: red;\r\n`;\r\nconst WeatherContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\n\r\nexport default CityListItem;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport './Error.css';\r\n\r\ninterface IProps {\r\n  errorString: string,\r\n}\r\n\r\nconst Error: React.SFC<IProps> = ({ errorString }) => (\r\n  <div className=\"error\">\r\n    <FontAwesomeIcon icon=\"exclamation-circle\" />\r\n    <span className=\"error-text\">{errorString}</span>\r\n  </div>\r\n)\r\n\r\nexport default Error;\r\n","/* tslint:disable no-empty-interface */\r\nimport * as React from 'react';\r\nimport Header from '../header/Header';\r\nimport { City } from '../models/City';\r\nimport { LocalStorageCity } from '../models/LocalStorageCity';\r\nimport { getCurrentWeather, getCurrentWeatherForPosition, getCurrentWeathers } from '../util/Api';\r\nimport * as store from '../util/Store';\r\nimport AddCity from './AddCity';\r\nimport './CityHandler.css';\r\nimport CityListItem from './CityListItem';\r\nimport Error from './Error';\r\n\r\ninterface IProps {}\r\ninterface IState {\r\n  cities: City[],\r\n  error: string,\r\n}\r\n\r\nclass CityHandler extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      cities: [],\r\n      error: '',\r\n    };\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.addCity = this.addCity.bind(this);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords;\r\n      \r\n      getCurrentWeatherForPosition(latitude, longitude)\r\n        .then((res) => {\r\n          const { cities } = this.state;\r\n          cities.unshift(res);\r\n          this.setState({ cities });\r\n        })\r\n        .catch(() => this.setState({ error: 'Could not get weather of current location' }));\r\n    });\r\n    const storedCities = store.getCities();\r\n    if (storedCities.length > 0) {\r\n      const ids = storedCities.map(a => a.id).reduce((a, b) => `${a},${b}`);\r\n      getCurrentWeathers(ids)\r\n        .then(res => this.setState({ cities: res.list }))\r\n        .catch(() => this.setState({ error: 'Could not get weather for stored cities' }));\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"full-scale city-handler\">\r\n        {this.state.error ? \r\n          <Error errorString={this.state.error} />\r\n          : ''}\r\n        <div className=\"App-cities\">\r\n          <Header name=\"City view\" />\r\n          \r\n          {this.state.cities.map(item => (\r\n            <CityListItem key={item.name} item={item} removeItem={this.removeItem} />\r\n            ))}\r\n        </div>\r\n        <div className=\"App-cities\">\r\n          <AddCity\r\n            addCity={this.addCity}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private addCity(cityText: string) {\r\n    const { cities } = this.state;\r\n    if (cities.find(x => x.name.toLowerCase() === cityText.toLowerCase()) !== undefined) {\r\n      this.setState({ error: 'City already exists' });\r\n      return;\r\n    }\r\n    getCurrentWeather(cityText)\r\n      .then((res) => {\r\n        cities.push(res);\r\n        store.addCity(new LocalStorageCity(res.id, cityText));\r\n        this.setState({\r\n          cities,\r\n        });\r\n      })\r\n      .catch(() => this.setState({ error: 'Could not get weather for specified city' }));\r\n  }\r\n\r\n  private removeItem(item: City, e: any) {\r\n    e.preventDefault();\r\n    const { cities } = this.state;\r\n    const filteredCities = cities.filter(x => x.name !== item.name);\r\n    store.removeCity(item);\r\n    this.setState({\r\n      cities: filteredCities,\r\n    });\r\n  }\r\n}\r\n\r\nexport default CityHandler;\r\n"],"sourceRoot":""}