{"version":3,"sources":["header/Header.tsx","shared/WeatherIconSelector.tsx","util/Keys.ts","util/Api.ts","models/City.ts","models/Weather.ts","WeatherHandler/SelectedWeather.tsx","util/DateHelper.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","WeatherHandler/WeatherListItem.tsx","WeatherHandler/WeatherList.tsx","util/WeatherListHelper.ts","WeatherHandler/WeatherDisplayer.tsx","WeatherHandler/CurrentLocationWeatherHandler.tsx"],"names":["Header","name","className","href","process","WeatherIconSelector","icon","faSun","color","faTint","faSnowflake","faCloud","apiKey","baseUrl","getCurrentWeather","city","fetch","then","res","status","json","Error","statusText","getCurrentWeatherForPosition","lat","lon","getWeatherForecastForPosition","getCurrentWeathers","ids","getWeatherForecast","id","City","main","weather","dt","dt_txt","this","temp","Weather","wind","pressure","humidity","speed","deg","SelectedWeatherView","undefined","Math","round","style","transform","formatDate","date","formatedDate","Date","replace","getHours","length","getDayFromDateString","dateString","dayOfWeek","getDay","_arrayLikeToArray","arr","len","i","arr2","Array","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","Object","prototype","toString","call","slice","constructor","from","test","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","WeatherListItem","selectedWeather","changeSelectedWeather","isSelected","onClick","WeatherList","weatherList","structuredWeather","sortedWeather","split","keys","find","x","push","structureWeatherIntoDays","map","dayOfWeather","item","getWeatherIcon","WeatherDisplayer","state","weatherIcon","setState","backgroundClass","getBackgroundClass","props","cityName","nextProps","prevState","React","CurrentLocationWeatherHandler","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","list","catch","error","console"],"mappings":"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","file":"static/js/4.ce6a0ac1.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './Header.css'\r\n\r\nconst baseUrl = process.env.PUBLIC_URL;\r\n\r\ninterface IProps {\r\n  name: string;\r\n}\r\nconst Header: React.SFC<IProps> = ({ name }) => (\r\n  <header className=\"App-header header\">\r\n    <a href={`${baseUrl}/list`} className=\"App-menu\">\r\n      <span className=\"fas fa-list\" />\r\n    </a>\r\n    <h1 className=\"App-title\">{name}</h1>\r\n  </header>\r\n  \r\n);\r\n\r\nexport default Header;\r\n","import { faCloud, faSnowflake, faSun, faTint } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\n\r\ninterface IWeatherIconProps {\r\n  icon: string;\r\n}\r\n\r\nconst WeatherIconSelector: React.SFC<IWeatherIconProps> = ({ icon }) => {\r\n  switch (icon) {\r\n    case 'Sun':\r\n    case 'Clear':\r\n      return (<FontAwesomeIcon icon={faSun} color=\"yellow\" />);\r\n    case 'Rain':\r\n      return (<FontAwesomeIcon icon={faTint} color=\"blue\" />);\r\n    case 'Snow':\r\n      return (<FontAwesomeIcon icon={faSnowflake} />);\r\n    case 'Clouds':\r\n    case 'Fog':\r\n    default:\r\n      return (<FontAwesomeIcon icon={faCloud} color=\"grey\" />);\r\n  }\r\n};\r\n\r\nexport default WeatherIconSelector;\r\n","export const apiKey = '794fd1eb804018f71fb274449e212c02';","import { apiKey } from './Keys';\r\nconst baseUrl = 'https://api.openweathermap.org/data/2.5/';\r\n\r\nexport function getCurrentWeather(city: string) {\r\n  return fetch(`${baseUrl}weather?q=${city}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getCurrentWeatherForPosition(lat: number, lon: number) {\r\n  return fetch(`${baseUrl}weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getWeatherForecastForPosition(lat: number, lon: number) {\r\n  return fetch(`${baseUrl}forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getCurrentWeathers(ids: any) {\r\n  return fetch(`${baseUrl}group?id=${ids}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n\r\nexport function getWeatherForecast(id: string) {\r\n  return fetch(`${baseUrl}forecast?id=${id}&appid=${apiKey}&units=metric`)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json();\r\n      }\r\n      throw new Error(res.statusText);\r\n    });\r\n}\r\n","export class City {\r\n  public name: string\r\n  public id: string;\r\n  public main: {temp: number};\r\n  public weather: Array<{main: string}>;\r\n  public dt: number;\r\n  public dt_txt: string;\r\n  constructor() {\r\n    this.name = '';\r\n    this.id = '';\r\n    this.main = { temp: 0 };\r\n    this.weather = [{main: ''}];\r\n    this.dt = 0;\r\n    this.dt_txt = '';\r\n  }\r\n}","export class Weather {\r\n  public name: string\r\n  public id: string;\r\n  public main: {temp: number, pressure: number, humidity: number};\r\n  public weather: Array<{main: string}>;\r\n  public dt: number;\r\n  public dt_txt: string;\r\n  public wind: {speed: number, deg: number};\r\n  constructor() {\r\n    this.name = '';\r\n    this.id = '';\r\n    this.main = { temp: 0, pressure: 0, humidity: 0 };\r\n    this.weather = [{main: ''}];\r\n    this.dt = 0;\r\n    this.dt_txt = '';\r\n    this.wind = { speed: 0, deg: 0 };\r\n  }\r\n}\r\n\r\n","import * as React from \"react\";\r\nimport { Weather } from \"../models/Weather\";\r\nimport './SelectedWeather.css';\r\n\r\ninterface IPropsView {\r\n  weather: Weather;\r\n}\r\n\r\nconst SelectedWeatherView: React.SFC<IPropsView> = ({ weather }) => {\r\n  if (weather.main === null || weather.main === undefined) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"selected-weather-view\">\r\n      <div className=\"current-weather\">\r\n        <span className=\"current-temperature\">{Math.round(weather.main.temp)}</span>\r\n        <span>°</span>\r\n      </div>\r\n      <div className=\"detailed-data\">\r\n        <div>\r\n          <div className=\"detailed-data__label\">Wind</div>\r\n          <div>{weather.wind.speed} m/s\r\n            <span>\r\n              <i style={{ transform: `rotate(${weather.wind.deg}deg`}} className=\"fas fa-arrow-up\"/>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"detailed-data__label\">Humidity</div>\r\n          <div>{weather.main.humidity}%</div>\r\n        </div>\r\n        <div>\r\n          <div className=\"detailed-data__label\">Pressure</div>\r\n          <div>{weather.main.pressure}hPa</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectedWeatherView;\r\n","\r\nexport function formatDate(date: string) {\r\n  const formatedDate = new Date(date.replace(' ', 'T'));\r\n  const time = `${formatedDate.getHours()}`.length === 1 ? `0${formatedDate.getHours()}` : `${formatedDate.getHours()}`;\r\n  return time;\r\n}\r\n\r\n\r\nexport function getDayFromDateString(dateString: string): string {\r\n  const date = new Date(dateString);\r\n  const dayOfWeek = date.getDay();\r\n  if (dayOfWeek === (new Date().getDay())) {\r\n    return 'Today';\r\n  }\r\n  switch (dayOfWeek) {\r\n    case 0:\r\n      return 'Sunday';\r\n    case 1:\r\n      return 'Monday';\r\n    case 2:\r\n      return 'Tuesday';\r\n    case 3:\r\n      return 'Wednesday';\r\n    case 4:\r\n      return 'Thursday';\r\n    case 5:\r\n      return 'Friday';\r\n    case 6:\r\n      return 'Saturday';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import * as React from \"react\";\r\nimport { Weather } from \"../models/Weather\";\r\nimport { formatDate } from \"../util/DateHelper\";\r\nimport WeatherIconSelector from \"../shared/WeatherIconSelector\";\r\nimport './WeatherListItem.css';\r\n\r\ninterface IWeatherViewProps {\r\n  weather: Weather;\r\n  selectedWeather: Weather;\r\n  changeSelectedWeather: ((weather: Weather) => void); // TODO: remove till parent component\r\n}\r\n\r\nconst WeatherListItem: React.SFC<IWeatherViewProps> = ({weather, selectedWeather, changeSelectedWeather}) => {\r\n  const onClick = () => changeSelectedWeather(weather);\r\n\r\n  const isSelected = weather.dt === selectedWeather.dt;\r\n\r\n  return (\r\n    <button onClick={onClick} className={`weather-list-item ${isSelected ? 'weather-list-item--selected' : ''}`}>\r\n      <span>\r\n        {formatDate(weather.dt_txt)}\r\n      </span>\r\n      <div>\r\n      <WeatherIconSelector icon={weather.weather[0].main} />\r\n      </div>\r\n      <div>\r\n        {Math.round(weather.main.temp)}°\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default WeatherListItem;\r\n","import * as React from 'react';\r\nimport { Weather } from '../models/Weather';\r\nimport { getDayFromDateString } from '../util/DateHelper';\r\nimport { structureWeatherIntoDays } from '../util/WeatherListHelper';\r\nimport './WeatherList.css';\r\nimport WeatherListItem from './WeatherListItem';\r\n\r\ninterface IProps {\r\n  weatherList: Weather[];\r\n  selectedWeather: Weather;\r\n  changeSelectedWeather: (selectedWeather: Weather) => void;\r\n}\r\n\r\n\r\nexport const WeatherList: React.SFC<IProps> = ({ weatherList, selectedWeather, changeSelectedWeather }) => {\r\n  const structuredWeather = structureWeatherIntoDays(weatherList);\r\n  return (<div className=\"weather-list scrollbar\">\r\n    {Object.keys(structuredWeather).map(dayOfWeather => (<div key={dayOfWeather} className=\"day-container\">\r\n      <span className=\"day-title\">\r\n        {getDayFromDateString(dayOfWeather)}\r\n      </span>\r\n      <div className=\"day-weather-container\">\r\n        {structuredWeather[dayOfWeather].map((item: Weather) =>\r\n        <WeatherListItem key={item.dt} weather={item} selectedWeather={selectedWeather} changeSelectedWeather={changeSelectedWeather} />)}\r\n      </div>\r\n    </div>))}\r\n  </div>);\r\n}\r\n","import { Weather } from \"../models/Weather\";\r\n\r\nexport function structureWeatherIntoDays(weatherList: Weather[]): any {\r\n  const sortedWeather: any = {};\r\n  for(const weather of weatherList) {\r\n    const dateString = weather.dt_txt.split(' ')[0];\r\n    if (Object.keys(sortedWeather).find(x => x === dateString)) {\r\n      sortedWeather[dateString].push(weather);\r\n    } else {\r\n      sortedWeather[dateString] = [weather];\r\n    }\r\n  }\r\n  return sortedWeather;\r\n}","import * as React from 'react';\r\nimport Header from '../header/Header';\r\nimport { Weather } from '../models/Weather';\r\nimport SelectedWeather from './SelectedWeather';\r\nimport './WeatherDisplayer.css';\r\nimport { WeatherList } from './WeatherList';\r\n\r\ninterface IProps {\r\n  weatherList: Weather[];\r\n  cityName: string;\r\n}\r\n\r\ninterface IState {\r\n  selectedWeather: Weather;\r\n  weatherIcon: string;\r\n}\r\n\r\nfunction getWeatherIcon(selectedWeather: Weather): string {\r\n  if (selectedWeather.weather && selectedWeather.weather.length > 0) {\r\n    return selectedWeather.weather[0].main;\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction getBackgroundClass(selectedWeather: Weather): string {\r\n  const date = new Date(selectedWeather.dt*1000);\r\n  if (19 < date.getHours() || date.getHours() < 6) {\r\n    return 'weather-displayer--night';\r\n  }\r\n  if (selectedWeather.weather && selectedWeather.weather.length > 0) {\r\n    if (selectedWeather.weather[0].main === 'Sun') {\r\n      return 'weather-displayer--sun';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Clear') {\r\n      return 'weather-displayer--sun';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Rain') {\r\n      return 'weather-displayer--rain';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Snow') {\r\n      return 'weather-displayer--snow';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Clouds') {\r\n      return 'weather-displayer--clouds';\r\n    }\r\n    return 'weather-displayer--clouds';\r\n\r\n  }\r\n  return '';\r\n}\r\n\r\n\r\nclass WeatherDisplayer extends React.PureComponent<IProps, IState> {\r\n  public static getDerivedStateFromProps(nextProps: IProps, prevState: IState) {\r\n    if (nextProps.weatherList.length > 0 && prevState.selectedWeather.name === '') {\r\n      const selectedWeather = nextProps.weatherList[0];\r\n      return {\r\n        selectedWeather,\r\n        weatherIcon: getWeatherIcon(selectedWeather),\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  public state = {\r\n    selectedWeather: new Weather(),\r\n    weatherIcon: '',\r\n  }\r\n\r\n\r\n  public render () {\r\n    const backgroundClass = getBackgroundClass(this.state.selectedWeather);\r\n    return (\r\n      <div className={`weather-displayer ${backgroundClass}`}>\r\n        <Header name={this.props.cityName} />\r\n        <div className=\"city-item\">\r\n          <SelectedWeather\r\n            weather={this.state.selectedWeather}\r\n          />\r\n        </div>\r\n        <div className=\"footer\">\r\n          <WeatherList weatherList={this.props.weatherList} selectedWeather={this.state.selectedWeather} changeSelectedWeather={this.changeSelectedWeather} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  private changeSelectedWeather = (selectedWeather: Weather) => {\r\n    this.setState({\r\n      selectedWeather,\r\n      weatherIcon: getWeatherIcon(selectedWeather),\r\n    });\r\n  }\r\n}\r\n\r\nexport default WeatherDisplayer;\r\n","import * as React from 'react';\r\nimport { City } from '../models/City';\r\nimport { getWeatherForecastForPosition } from '../util/Api';\r\nimport WeatherDisplayer from './WeatherDisplayer';\r\n\r\ninterface IState {\r\n  city: City,\r\n  weatherList: City[],\r\n}\r\n\r\nclass CurrentLocationWeatherHandler extends React.Component<{}, IState> {\r\n  public state = {\r\n    city: new City(),\r\n    weatherList: [],\r\n  };\r\n\r\n  public componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords;\r\n      getWeatherForecastForPosition(latitude, longitude)\r\n        .then(res => this.setState({ city: res.city, weatherList: res.list }))\r\n        .catch(error => console.error(error)); //tslint:disable-line\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    return <WeatherDisplayer weatherList={this.state.weatherList} cityName={this.state.city.name} />;\r\n  }\r\n}\r\n\r\nexport default CurrentLocationWeatherHandler;\r\n"],"sourceRoot":""}